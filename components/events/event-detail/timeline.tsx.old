'use client';

import { useTranslation } from 'react-i18next';
import { format } from 'date-fns';
import { fr, enUS, de, it } from 'date-fns/locale';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Clock } from 'lucide-react';
import { cn } from '@/lib/utils';

interface Session {
  id: string;
  title: string;
  startTime: Date;
  endTime: Date;
  roomName: string;
  speakerName: string;
  type: 'talk' | 'workshop' | 'break';
}

interface TimelineProps {
  sessions: Session[];
  currentLang: string;
}

const locales = {
  fr,
  en: enUS,
  de,
  it,
};

export function Timeline({ sessions, currentLang }: TimelineProps) {
  const { t } = useTranslation('components/event-detail');
  const locale = locales[currentLang as keyof typeof locales] || enUS;

  if (!sessions.length) {
    return (
      <div className="text-center py-12 text-muted-foreground">
        {t('timeline.noSessions')}
      </div>
    );
  }

  // Grouper les sessions par heure
  const groupedSessions = sessions.reduce((acc, session) => {
    const hour = format(session.startTime, 'HH:mm', { locale });
    if (!acc[hour]) {
      acc[hour] = [];
    }
    acc[hour].push(session);
    return acc;
  }, {} as Record<string, Session[]>);

  return (
    <section className="py-12 bg-muted/30">
      <div className="container">
        <h2 className="text-2xl font-semibold tracking-tight mb-8">
          {t('timeline.title')}
        </h2>

        <div className="relative">
          {/* Ligne verticale */}
          <div className="absolute left-0 top-0 bottom-0 w-px bg-border md:left-1/2" />

          <div className="space-y-8">
            {Object.entries(groupedSessions).map(([hour, hourSessions]) => (
              <div key={hour} className="relative">
                {/* Marqueur de temps */}
                <div className="absolute left-0 md:left-1/2 -translate-x-1/2 -mt-2">
                  <div className="bg-primary text-primary-foreground text-sm font-medium px-3 py-1 rounded-full">
                    {hour}
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-8 pt-8">
                  {hourSessions.map((session, index) => {
                    const isEven = index % 2 === 0;
                    return (
                      <div
                        key={session.id}
                        className={cn(
                          "relative",
                          isEven ? "md:pr-8" : "md:pl-8 md:col-start-2"
                        )}
                      >
                        <Card className="p-6 hover:shadow-lg transition-shadow">
                          <div className="space-y-4">
                            <div className="space-y-2">
                              <Badge
                                variant={
                                  session.type === 'break'
                                    ? 'secondary'
                                    : 'default'
                                }
                              >
                                {session.type}
                              </Badge>
                              <h3 className="text-lg font-semibold">
                                {session.title}
                              </h3>
                            </div>

                            <div className="flex items-center gap-4 text-sm text-muted-foreground">
                              <div className="flex items-center gap-1">
                                <Clock className="h-4 w-4" />
                                <span>
                                  {format(session.startTime, 'HH:mm')} -{' '}
                                  {format(session.endTime, 'HH:mm')}
                                </span>
                              </div>
                              <span>â€¢</span>
                              <span>{session.roomName}</span>
                            </div>

                            {session.type !== 'break' && (
                              <div className="text-sm font-medium">
                                {session.speakerName}
                              </div>
                            )}
                          </div>
                        </Card>
                      </div>
                    );
                  })}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}
